/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Error from a DataService
 * The source error either comes from a failed HTTP response or was thrown within the service.
 * @param error the HttpErrorResponse or the error thrown by the service
 * @param requestData the HTTP request information such as the method and the url.
 */
export class DataServiceError {
    /**
     * @param {?} error
     * @param {?} requestData
     */
    constructor(error, requestData) {
        this.error = error;
        this.requestData = requestData;
        this.message = typeof error === 'string' ? error : extractMessage(error);
    }
}
if (false) {
    /** @type {?} */
    DataServiceError.prototype.message;
    /** @type {?} */
    DataServiceError.prototype.error;
    /** @type {?} */
    DataServiceError.prototype.requestData;
}
/**
 * @param {?} sourceError
 * @return {?}
 */
function extractMessage(sourceError) {
    const { error, body, message } = sourceError;
    /** @type {?} */
    let errMessage;
    if (error) {
        // prefer HttpErrorResponse.error to its message property
        errMessage = typeof error === 'string' ? error : error.message;
    }
    else if (message) {
        errMessage = message;
    }
    else if (body) {
        // try the body if no error or message property
        errMessage = typeof body === 'string' ? body : body.error;
    }
    return typeof errMessage === 'string'
        ? errMessage
        : errMessage
            ? JSON.stringify(errMessage)
            : null;
}
/**
 * Payload for an EntityAction data service error such as QUERY_ALL_ERROR
 * @record
 */
export function EntityActionDataServiceError() { }
/** @type {?} */
EntityActionDataServiceError.prototype.error;
/** @type {?} */
EntityActionDataServiceError.prototype.originalAction;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1zZXJ2aWNlLWVycm9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmdyeC1kYXRhLyIsInNvdXJjZXMiOlsiZGF0YXNlcnZpY2VzL2RhdGEtc2VydmljZS1lcnJvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBV0EsTUFBTTs7Ozs7SUFHSixZQUFtQixLQUFVLEVBQVMsV0FBd0I7UUFBM0MsVUFBSyxHQUFMLEtBQUssQ0FBSztRQUFTLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQzVELElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUMxRTtDQUNGOzs7Ozs7Ozs7Ozs7O0FBR0Qsd0JBQXdCLFdBQWdCO0lBQ3RDLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLFdBQVcsQ0FBQzs7SUFDN0MsSUFBSSxVQUFVLENBQVM7SUFDdkIsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzs7UUFFVixVQUFVLEdBQUcsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7S0FDaEU7SUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNuQixVQUFVLEdBQUcsT0FBTyxDQUFDO0tBQ3RCO0lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7O1FBRWhCLFVBQVUsR0FBRyxPQUFPLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztLQUMzRDtJQUVELE1BQU0sQ0FBQyxPQUFPLFVBQVUsS0FBSyxRQUFRO1FBQ25DLENBQUMsQ0FBQyxVQUFVO1FBQ1osQ0FBQyxDQUFDLFVBQVU7WUFDVixDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7WUFDNUIsQ0FBQyxDQUFDLElBQUksQ0FBQztDQUNaIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW50aXR5QWN0aW9uIH0gZnJvbSAnLi4vYWN0aW9ucy9lbnRpdHktYWN0aW9uJztcbmltcG9ydCB7IFJlcXVlc3REYXRhIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcblxuLyoqXG4gKiBFcnJvciBmcm9tIGEgRGF0YVNlcnZpY2VcbiAqIFRoZSBzb3VyY2UgZXJyb3IgZWl0aGVyIGNvbWVzIGZyb20gYSBmYWlsZWQgSFRUUCByZXNwb25zZSBvciB3YXMgdGhyb3duIHdpdGhpbiB0aGUgc2VydmljZS5cbiAqIEBwYXJhbSBlcnJvciB0aGUgSHR0cEVycm9yUmVzcG9uc2Ugb3IgdGhlIGVycm9yIHRocm93biBieSB0aGUgc2VydmljZVxuICogQHBhcmFtIHJlcXVlc3REYXRhIHRoZSBIVFRQIHJlcXVlc3QgaW5mb3JtYXRpb24gc3VjaCBhcyB0aGUgbWV0aG9kIGFuZCB0aGUgdXJsLlxuICovXG4vLyBJZiBleHRlbmQgZnJvbSBFcnJvciwgYGRzZSBpbnN0YW5jZW9mIERhdGFTZXJ2aWNlRXJyb3JgIHJldHVybnMgZmFsc2Vcbi8vIGluIHNvbWUgKGFsbD8pIHVuaXQgdGVzdHMgc28gZG9uJ3QgYm90aGVyIHRyeWluZy5cbmV4cG9ydCBjbGFzcyBEYXRhU2VydmljZUVycm9yIHtcbiAgbWVzc2FnZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBlcnJvcjogYW55LCBwdWJsaWMgcmVxdWVzdERhdGE6IFJlcXVlc3REYXRhKSB7XG4gICAgdGhpcy5tZXNzYWdlID0gdHlwZW9mIGVycm9yID09PSAnc3RyaW5nJyA/IGVycm9yIDogZXh0cmFjdE1lc3NhZ2UoZXJyb3IpO1xuICB9XG59XG5cbi8vIE1hbnkgd2F5cyB0aGUgZXJyb3IgY2FuIGJlIHNoYXBlZC4gVGhlc2UgYXJlIHRoZSB3YXlzIHdlIHJlY29nbml6ZS5cbmZ1bmN0aW9uIGV4dHJhY3RNZXNzYWdlKHNvdXJjZUVycm9yOiBhbnkpIHtcbiAgY29uc3QgeyBlcnJvciwgYm9keSwgbWVzc2FnZSB9ID0gc291cmNlRXJyb3I7XG4gIGxldCBlcnJNZXNzYWdlOiBzdHJpbmc7XG4gIGlmIChlcnJvcikge1xuICAgIC8vIHByZWZlciBIdHRwRXJyb3JSZXNwb25zZS5lcnJvciB0byBpdHMgbWVzc2FnZSBwcm9wZXJ0eVxuICAgIGVyck1lc3NhZ2UgPSB0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnID8gZXJyb3IgOiBlcnJvci5tZXNzYWdlO1xuICB9IGVsc2UgaWYgKG1lc3NhZ2UpIHtcbiAgICBlcnJNZXNzYWdlID0gbWVzc2FnZTtcbiAgfSBlbHNlIGlmIChib2R5KSB7XG4gICAgLy8gdHJ5IHRoZSBib2R5IGlmIG5vIGVycm9yIG9yIG1lc3NhZ2UgcHJvcGVydHlcbiAgICBlcnJNZXNzYWdlID0gdHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnID8gYm9keSA6IGJvZHkuZXJyb3I7XG4gIH1cblxuICByZXR1cm4gdHlwZW9mIGVyck1lc3NhZ2UgPT09ICdzdHJpbmcnXG4gICAgPyBlcnJNZXNzYWdlXG4gICAgOiBlcnJNZXNzYWdlXG4gICAgICA/IEpTT04uc3RyaW5naWZ5KGVyck1lc3NhZ2UpXG4gICAgICA6IG51bGw7XG59XG5cbi8qKiBQYXlsb2FkIGZvciBhbiBFbnRpdHlBY3Rpb24gZGF0YSBzZXJ2aWNlIGVycm9yIHN1Y2ggYXMgUVVFUllfQUxMX0VSUk9SICovXG5leHBvcnQgaW50ZXJmYWNlIEVudGl0eUFjdGlvbkRhdGFTZXJ2aWNlRXJyb3Ige1xuICBlcnJvcjogRGF0YVNlcnZpY2VFcnJvcjtcbiAgb3JpZ2luYWxBY3Rpb246IEVudGl0eUFjdGlvbjtcbn1cbiJdfQ==