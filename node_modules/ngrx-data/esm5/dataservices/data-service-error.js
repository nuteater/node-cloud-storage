/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Error from a DataService
 * The source error either comes from a failed HTTP response or was thrown within the service.
 * @param error the HttpErrorResponse or the error thrown by the service
 * @param requestData the HTTP request information such as the method and the url.
 */
var /**
 * Error from a DataService
 * The source error either comes from a failed HTTP response or was thrown within the service.
 * @param error the HttpErrorResponse or the error thrown by the service
 * @param requestData the HTTP request information such as the method and the url.
 */
DataServiceError = /** @class */ (function () {
    function DataServiceError(error, requestData) {
        this.error = error;
        this.requestData = requestData;
        this.message = typeof error === 'string' ? error : extractMessage(error);
    }
    return DataServiceError;
}());
/**
 * Error from a DataService
 * The source error either comes from a failed HTTP response or was thrown within the service.
 * @param error the HttpErrorResponse or the error thrown by the service
 * @param requestData the HTTP request information such as the method and the url.
 */
export { DataServiceError };
if (false) {
    /** @type {?} */
    DataServiceError.prototype.message;
    /** @type {?} */
    DataServiceError.prototype.error;
    /** @type {?} */
    DataServiceError.prototype.requestData;
}
/**
 * @param {?} sourceError
 * @return {?}
 */
function extractMessage(sourceError) {
    var error = sourceError.error, body = sourceError.body, message = sourceError.message;
    /** @type {?} */
    var errMessage;
    if (error) {
        // prefer HttpErrorResponse.error to its message property
        errMessage = typeof error === 'string' ? error : error.message;
    }
    else if (message) {
        errMessage = message;
    }
    else if (body) {
        // try the body if no error or message property
        errMessage = typeof body === 'string' ? body : body.error;
    }
    return typeof errMessage === 'string'
        ? errMessage
        : errMessage
            ? JSON.stringify(errMessage)
            : null;
}
/**
 * Payload for an EntityAction data service error such as QUERY_ALL_ERROR
 * @record
 */
export function EntityActionDataServiceError() { }
/** @type {?} */
EntityActionDataServiceError.prototype.error;
/** @type {?} */
EntityActionDataServiceError.prototype.originalAction;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1zZXJ2aWNlLWVycm9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmdyeC1kYXRhLyIsInNvdXJjZXMiOlsiZGF0YXNlcnZpY2VzL2RhdGEtc2VydmljZS1lcnJvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBV0E7Ozs7OztBQUFBO0lBR0UsMEJBQW1CLEtBQVUsRUFBUyxXQUF3QjtRQUEzQyxVQUFLLEdBQUwsS0FBSyxDQUFLO1FBQVMsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDNUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzFFOzJCQWhCSDtJQWlCQyxDQUFBOzs7Ozs7O0FBTkQsNEJBTUM7Ozs7Ozs7Ozs7Ozs7QUFHRCx3QkFBd0IsV0FBZ0I7SUFDOUIsSUFBQSx5QkFBSyxFQUFFLHVCQUFJLEVBQUUsNkJBQU8sQ0FBaUI7O0lBQzdDLElBQUksVUFBVSxDQUFTO0lBQ3ZCLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7O1FBRVYsVUFBVSxHQUFHLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO0tBQ2hFO0lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDbkIsVUFBVSxHQUFHLE9BQU8sQ0FBQztLQUN0QjtJQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDOztRQUVoQixVQUFVLEdBQUcsT0FBTyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7S0FDM0Q7SUFFRCxNQUFNLENBQUMsT0FBTyxVQUFVLEtBQUssUUFBUTtRQUNuQyxDQUFDLENBQUMsVUFBVTtRQUNaLENBQUMsQ0FBQyxVQUFVO1lBQ1YsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO1lBQzVCLENBQUMsQ0FBQyxJQUFJLENBQUM7Q0FDWiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVudGl0eUFjdGlvbiB9IGZyb20gJy4uL2FjdGlvbnMvZW50aXR5LWFjdGlvbic7XG5pbXBvcnQgeyBSZXF1ZXN0RGF0YSB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5cbi8qKlxuICogRXJyb3IgZnJvbSBhIERhdGFTZXJ2aWNlXG4gKiBUaGUgc291cmNlIGVycm9yIGVpdGhlciBjb21lcyBmcm9tIGEgZmFpbGVkIEhUVFAgcmVzcG9uc2Ugb3Igd2FzIHRocm93biB3aXRoaW4gdGhlIHNlcnZpY2UuXG4gKiBAcGFyYW0gZXJyb3IgdGhlIEh0dHBFcnJvclJlc3BvbnNlIG9yIHRoZSBlcnJvciB0aHJvd24gYnkgdGhlIHNlcnZpY2VcbiAqIEBwYXJhbSByZXF1ZXN0RGF0YSB0aGUgSFRUUCByZXF1ZXN0IGluZm9ybWF0aW9uIHN1Y2ggYXMgdGhlIG1ldGhvZCBhbmQgdGhlIHVybC5cbiAqL1xuLy8gSWYgZXh0ZW5kIGZyb20gRXJyb3IsIGBkc2UgaW5zdGFuY2VvZiBEYXRhU2VydmljZUVycm9yYCByZXR1cm5zIGZhbHNlXG4vLyBpbiBzb21lIChhbGw/KSB1bml0IHRlc3RzIHNvIGRvbid0IGJvdGhlciB0cnlpbmcuXG5leHBvcnQgY2xhc3MgRGF0YVNlcnZpY2VFcnJvciB7XG4gIG1lc3NhZ2U6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgZXJyb3I6IGFueSwgcHVibGljIHJlcXVlc3REYXRhOiBSZXF1ZXN0RGF0YSkge1xuICAgIHRoaXMubWVzc2FnZSA9IHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZycgPyBlcnJvciA6IGV4dHJhY3RNZXNzYWdlKGVycm9yKTtcbiAgfVxufVxuXG4vLyBNYW55IHdheXMgdGhlIGVycm9yIGNhbiBiZSBzaGFwZWQuIFRoZXNlIGFyZSB0aGUgd2F5cyB3ZSByZWNvZ25pemUuXG5mdW5jdGlvbiBleHRyYWN0TWVzc2FnZShzb3VyY2VFcnJvcjogYW55KSB7XG4gIGNvbnN0IHsgZXJyb3IsIGJvZHksIG1lc3NhZ2UgfSA9IHNvdXJjZUVycm9yO1xuICBsZXQgZXJyTWVzc2FnZTogc3RyaW5nO1xuICBpZiAoZXJyb3IpIHtcbiAgICAvLyBwcmVmZXIgSHR0cEVycm9yUmVzcG9uc2UuZXJyb3IgdG8gaXRzIG1lc3NhZ2UgcHJvcGVydHlcbiAgICBlcnJNZXNzYWdlID0gdHlwZW9mIGVycm9yID09PSAnc3RyaW5nJyA/IGVycm9yIDogZXJyb3IubWVzc2FnZTtcbiAgfSBlbHNlIGlmIChtZXNzYWdlKSB7XG4gICAgZXJyTWVzc2FnZSA9IG1lc3NhZ2U7XG4gIH0gZWxzZSBpZiAoYm9keSkge1xuICAgIC8vIHRyeSB0aGUgYm9keSBpZiBubyBlcnJvciBvciBtZXNzYWdlIHByb3BlcnR5XG4gICAgZXJyTWVzc2FnZSA9IHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJyA/IGJvZHkgOiBib2R5LmVycm9yO1xuICB9XG5cbiAgcmV0dXJuIHR5cGVvZiBlcnJNZXNzYWdlID09PSAnc3RyaW5nJ1xuICAgID8gZXJyTWVzc2FnZVxuICAgIDogZXJyTWVzc2FnZVxuICAgICAgPyBKU09OLnN0cmluZ2lmeShlcnJNZXNzYWdlKVxuICAgICAgOiBudWxsO1xufVxuXG4vKiogUGF5bG9hZCBmb3IgYW4gRW50aXR5QWN0aW9uIGRhdGEgc2VydmljZSBlcnJvciBzdWNoIGFzIFFVRVJZX0FMTF9FUlJPUiAqL1xuZXhwb3J0IGludGVyZmFjZSBFbnRpdHlBY3Rpb25EYXRhU2VydmljZUVycm9yIHtcbiAgZXJyb3I6IERhdGFTZXJ2aWNlRXJyb3I7XG4gIG9yaWdpbmFsQWN0aW9uOiBFbnRpdHlBY3Rpb247XG59XG4iXX0=